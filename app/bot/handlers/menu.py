from aiogram import F, Bot, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.middlewares.auth import AuthCallbackMiddleware
from hh.client import HHClient
from storage.sqlite_impl import SQLiteRepository

router = Router()


class SearchTextState(StatesGroup):
    SEARCHTEXT = State()


class CoverLetterState(StatesGroup):
    COVER_LETTER = State()


class MinSalaryState(StatesGroup):
    MIN_SALARY = State()


class ExperienceState(StatesGroup):
    EXPERIENCE = State()


class ResumeState(StatesGroup):
    RESUME = State()


class FrequencyState(StatesGroup):
    FREQUENCY = State()


def setup(repo: SQLiteRepository, hh_client: HHClient, bot: Bot) -> Router:
    router.callback_query.middleware(AuthCallbackMiddleware(repo, hh_client))
    @router.callback_query(F.data == "menu")
    async def menu(q: types.CallbackQuery, state: FSMContext) -> None:
        filters = await repo.get_filters(q.from_user.id)
        message = f"""–ü—Ä–∏–≤–µ—Ç, {q.from_user.full_name}!

–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:"""

        menu_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞‚öôÔ∏è", callback_data="filters"
                    ),
                    types.InlineKeyboardButton(
                        text=f"–ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫ {'üîî' if filters.get('is_applying') else '‚ùå'}",
                        callback_data="toggle_applying",
                    ),
                ],
            ]
        )
        await q.message.answer(message, reply_markup=menu_kb)
        await q.answer()

    @router.callback_query(F.data == "filters")
    async def show_filters(q: types.CallbackQuery):
        filters_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–°–æ–ø—Ä–æ–≤–æ–¥-–Ω–æ–µ –ø–∏—Å—å–º–æüìù", callback_data="cover_letter"
                    ),
                    types.InlineKeyboardButton(
                        text="–¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞üîë", callback_data="search_text"
                    ),
                ],
                [
                    types.InlineKeyboardButton(
                        text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞üí∞", callback_data="min_salary"
                    ),
                    types.InlineKeyboardButton(
                        text="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ãüëî", callback_data="experience"
                    ),
                ],
                [
                    types.InlineKeyboardButton(text="–†–µ–∑—é–º–µüìÑ", callback_data="resume"),
                    types.InlineKeyboardButton(
                        text="–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤üìÖ", callback_data="frequency"
                    ),
                ],
                [
                    types.InlineKeyboardButton(text="–ú–µ–Ω—éüìã", callback_data="menu"),
                ],
            ]
        )
        await q.message.answer(
            "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:", reply_markup=filters_kb, show_alert=False
        )
        await q.answer()

    @router.callback_query(F.data == "cancel_filters")
    async def cancel_filters(q: types.CallbackQuery, state: FSMContext) -> None:
        await state.clear()
        await show_filters(q)

    @router.callback_query(F.data == "search_text")
    async def ask_search_text(q: types.CallbackQuery, state: FSMContext) -> None:
        await state.clear()
        await state.set_state(SearchTextState.SEARCHTEXT)

        search_text_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data="cancel_filters"
                    ),
                ],
            ],
        )
        f = await repo.get_filters(q.from_user.id)
        if f.get("search_text"):
            message = f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞:\n\n{f['search_text']}"
        else:
            message = "–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞: –Ω–µ—Ç"

        message += "\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞:"

        await q.message.answer(message, reply_markup=search_text_kb)
        await q.answer()

    @router.message(SearchTextState.SEARCHTEXT)
    async def set_search_text(msg: types.Message, state: FSMContext) -> None:
        filters = await repo.get_filters(msg.from_user.id)
        filters["search_text"] = msg.text or ""
        await repo.set_filters(msg.from_user.id, filters)
        await state.clear()
        search_text_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–ú–µ–Ω—éüìã", callback_data="menu"),
                ],
            ],
        )
        await msg.answer("–¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=search_text_kb)

    @router.callback_query(F.data == "cover_letter")
    async def ask_cover_letter(q: types.CallbackQuery, state: FSMContext) -> None:
        await state.clear()
        await state.set_state(CoverLetterState.COVER_LETTER)

        cover_letter_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data="cancel_filters"
                    ),
                ],
            ],
        )
        f = await repo.get_filters(q.from_user.id)
        if f.get("cover_letter"):
            message = f"–¢–µ–∫—É—â–µ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:\n\n{f['cover_letter']}"
        else:
            message = "–¢–µ–∫—É—â–µ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ: –Ω–µ—Ç"

        message += "\n\n–í–≤–µ–¥–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:"

        await q.message.answer(message, reply_markup=cover_letter_kb)
        await q.answer()

    @router.message(CoverLetterState.COVER_LETTER)
    async def set_cover_letter(msg: types.Message, state: FSMContext) -> None:
        filters = await repo.get_filters(msg.from_user.id)
        filters["cover_letter"] = msg.text
        await repo.set_filters(msg.from_user.id, filters)
        await state.clear()
        cover_letter_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–ú–µ–Ω—éüìã", callback_data="menu"),
                ],
            ],
        )
        await msg.answer(
            "–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=cover_letter_kb
        )

    @router.callback_query(F.data == "min_salary")
    async def ask_min_salary(q: types.CallbackQuery, state: FSMContext) -> None:
        await state.clear()
        await state.set_state(MinSalaryState.MIN_SALARY)

        min_salary_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data="cancel_filters"
                    ),
                ],
            ],
        )
        f = await repo.get_filters(q.from_user.id)
        if f.get("min_salary"):
            message = f"–¢–µ–∫—É—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:\n\n{f['min_salary']}"
        else:
            message = "–¢–µ–∫—É—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: –Ω–µ—Ç"

        message += "\n\n–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:"

        await q.message.answer(message, reply_markup=min_salary_kb)
        await q.answer()

    @router.message(MinSalaryState.MIN_SALARY)
    async def set_min_salary(msg: types.Message, state: FSMContext) -> None:
        filters = await repo.get_filters(msg.from_user.id)
        filters["min_salary"] = msg.text
        await repo.set_filters(msg.from_user.id, filters)
        await state.clear()
        min_salary_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–ú–µ–Ω—éüìã", callback_data="menu"),
                ],
            ],
        )
        await msg.answer(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=min_salary_kb
        )

    @router.callback_query(F.data == "experience")
    async def ask_experience(q: types.CallbackQuery, state: FSMContext) -> None:
        await state.clear()
        await state.set_state(ExperienceState.EXPERIENCE)

        access_token = await repo.get_token(q.from_user.id)
        experiences = await hh_client.get_experience(access_token.access_token)
        experiences_btns = [
            [
                types.InlineKeyboardButton(
                    text=exp["name"], callback_data=f"exp:{exp['id']}"
                )
            ]
            for exp in experiences
        ]

        experience_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                *experiences_btns,
                [
                    types.InlineKeyboardButton(
                        text="–í—Å–µ –æ–ø—ã—Ç—ã —Ä–∞–±–æ—Ç—ã", callback_data="exp:0"
                    ),
                ],
                [
                    types.InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data="cancel_filters"
                    ),
                ],
            ],
        )
        f = await repo.get_filters(q.from_user.id)
        if f.get("experience"):
            message = f"–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:\n\n{f['experience']}"
        else:
            message = "–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –Ω–µ—Ç"

        message += "\n\–í—ã–±–µ—Ä–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:"

        await q.message.answer(message, reply_markup=experience_kb)
        await q.answer()

    @router.callback_query(ExperienceState.EXPERIENCE)
    async def set_experience(q: types.CallbackQuery, state: FSMContext) -> None:
        f = await repo.get_filters(q.from_user.id)
        exp = q.data.split(":")[1]
        if exp == "0":
            f["experience"] = None
        else:
            f["experience"] = exp
        await repo.set_filters(q.from_user.id, f)
        await state.clear()

        experience_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–ú–µ–Ω—éüìã", callback_data="menu"),
                ],
            ],
        )
        await q.message.answer(
            "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=experience_kb
        )
        await q.answer()

    @router.callback_query(F.data == "resume")
    async def ask_resume(q: types.CallbackQuery, state: FSMContext) -> None:
        await state.clear()
        await state.set_state(ResumeState.RESUME)

        access_token = await repo.get_token(q.from_user.id)
        resumes = await hh_client.list_resumes(access_token.access_token)
        resumes_btns = [
            [
                types.InlineKeyboardButton(
                    text=resume["title"], callback_data=f"resume:{resume['id']}"
                )
            ]
            for resume in resumes
        ]

        resume_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                *resumes_btns,
                [
                    types.InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data="cancel_filters"
                    ),
                ],
            ],
        )
        f = await repo.get_filters(q.from_user.id)
        if f.get("resume_id"):
            for resume in resumes:
                if resume["id"] == f["resume_id"]:
                    message = f"–¢–µ–∫—É—â–∏–π —Ä–µ–∑—é–º–µ:\n\n{resume['title']}"
                    break
        else:
            message = "–¢–µ–∫—É—â–∏–π —Ä–µ–∑—é–º–µ: –Ω–µ—Ç"

        message += "\n\n–í—ã–±–µ—Ä–∏ —Ä–µ–∑—é–º–µ:"

        await q.message.answer(message, reply_markup=resume_kb)
        await q.answer()

    @router.callback_query(ResumeState.RESUME)
    async def set_resume(q: types.CallbackQuery, state: FSMContext) -> None:
        f = await repo.get_filters(q.from_user.id)
        resume = q.data.split(":")[1]
        if resume == "0":
            f["resume_id"] = None
        else:
            f["resume_id"] = resume
        await repo.set_filters(q.from_user.id, f)
        await state.clear()

        resume_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–ú–µ–Ω—éüìã", callback_data="menu"),
                ],
            ],
        )
        await q.message.answer("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=resume_kb)
        await q.answer()

    @router.callback_query(F.data == "toggle_applying")
    async def toggle_applying(q: types.CallbackQuery) -> None:
        f = await repo.get_filters(q.from_user.id)
        if f.get("is_applying"):
            f["is_applying"] = False
        else:
            if not f.get("resume_id") or not f.get("search_text"):
                await q.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞!")
                await q.answer()
                return
            f["is_applying"] = True

        await repo.set_filters(q.from_user.id, f)
        await menu(q, State())
        await q.answer()

    @router.callback_query(F.data == "frequency")
    async def ask_frequency(q: types.CallbackQuery, state: FSMContext) -> None:
        await state.clear()
        await state.set_state(FrequencyState.FREQUENCY)

        frequency_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data="cancel_filters"
                    ),
                ],
            ],
        )
        f = await repo.get_filters(q.from_user.id)
        if f.get("frequency"):
            message = f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:\n\n{f['frequency']} –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å."
        else:
            message = "–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤: –Ω–µ—Ç"

        message += "\n\n–í–≤–µ–¥–∏ —á–∞—Å—Ç–æ—Ç—É:"

        await q.message.answer(message, reply_markup=frequency_kb)
        await q.answer()

    @router.message(FrequencyState.FREQUENCY)
    async def set_frequency(msg: types.Message, state: FSMContext) -> None:
        filters = await repo.get_filters(msg.from_user.id)
        if not msg.text.isdigit():
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100)")
            return
        filters["frequency"] = int(msg.text)
        await repo.set_filters(msg.from_user.id, filters)
        await state.clear()
        frequency_kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–ú–µ–Ω—éüìã", callback_data="menu"),
                ],
            ],
        )
        await msg.answer("–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=frequency_kb)

    return router
